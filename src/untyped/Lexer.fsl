(* 
   The lexical analyzer: lexer.ml is generated automatically
   from lexer.mll.
   
   The only modification commonly needed here is adding new keywords to the 
   list of reserved words at the top.  
*)

{
(*
Copyright (c) 2003, Benjamin C. Pierce
Copyright (c) 2012, Jack Pappas
All rights reserved.

This code is provided under the terms of the 2-clause ("Simplified") BSD license.
See LICENSE.TXT for licensing details.
*)

module Lexer

open System
open Support.Error
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let reservedWords = [
  (* Keywords *)
  ("lambda", fun i -> Parser.LAMBDA i);
  
  (* Symbols *)
  (".", fun i -> Parser.DOT i);
  (";", fun i -> Parser.SEMI i);
  ("=", fun i -> Parser.EQ i);
  ("/", fun i -> Parser.SLASH i);
  ("(", fun i -> Parser.LPAREN i); 
  (")", fun i -> Parser.RPAREN i);
]

(* Support functions *)

type buildfun = Info -> Parser.token
let symbolTable = System.Collections.Generic.Dictionary<string, buildfun> (1024)
do
  reservedWords
  |> List.iter symbolTable.Add

let createID i (str : string) =
    match symbolTable.TryGetValue str with
    | true, f -> f i
    | false, _ ->
        let c = str.[0]
        if c >= 'A' && c <= 'Z' then
            Parser.UCID { i = i; v = str; }
        else
            Parser.LCID { i = i; v = str; }

let lineno = ref 1 
let depth = ref 0
let start = ref 0

let filename = ref ""
let startLex = ref dummyinfo

let newline (lexbuf : LexBuffer<char>) =
    incr lineno
    start := lexbuf.StartPos.pos_cnum   // Lexing.lexeme_start lexbuf

let info (lexbuf : LexBuffer<char>) =
    let lexeme_start = lexbuf.StartPos.pos_cnum  // Lexing.lexeme_start lexbuf
    createInfo !filename !lineno (lexeme_start - !start)
}

(* The main body of the lexical analyzer *)

rule main = parse
| [' ' '\009' '\012']+     { main lexbuf }

| [' ' '\009' '\012']*("\r")?"\n" { newline lexbuf; main lexbuf }

| "*/" { error (info lexbuf) "Unmatched end of comment" }

| "/*" { depth := 1; startLex := info lexbuf; comment lexbuf; main lexbuf }

| ['A'-'Z' 'a'-'z' '_']
  ['A'-'Z' 'a'-'z' '_' '0'-'9' '\'']*
    { createID (info lexbuf) (lexeme lexbuf) }

| ['/' ';' '(' ')' '.' '=']
    { createID (info lexbuf) (lexeme lexbuf) }

| eof { Parser.EOF (info lexbuf) }

| _  { error (info lexbuf) "Illegal character" }

and comment = parse
| "/*"
    { depth := !depth + 1; comment lexbuf }
| "*/"
    { depth := !depth - 1; if !depth > 0 then comment lexbuf }
| eof
    { error (!startLex) "Comment not terminated" }
| [^ '\n']
    { comment lexbuf }
| "\n"
    { newline lexbuf; comment lexbuf }

and getFile = parse
  " "* "\"" { getName lexbuf }

and getName = parse
  [^ '"' '\n']+ { filename := (lexeme lexbuf); finishName lexbuf }

and finishName = parse
  '"' [^ '\n']* { main lexbuf }
