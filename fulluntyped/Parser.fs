// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 14 "Parser.fsy"

open Ast

// HACK : This works around a bug in the current version of FsYacc
// (as of Oct-26-2012) where it doesn't correctly parse %type declarations
// containing a function arrow ('->'). By creating an alias for the type,
// we can use the alias for the %type declaration and it'll be parsed correctly.
type Toplevel = Ast.Context -> (Ast.Command list * Ast.Context)

# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VBAR of (Support.Error.Info)
  | USCORE of (Support.Error.Info)
  | TRIANGLE of (Support.Error.Info)
  | STAR of (Support.Error.Info)
  | SLASH of (Support.Error.Info)
  | SEMI of (Support.Error.Info)
  | RSQUARE of (Support.Error.Info)
  | RPAREN of (Support.Error.Info)
  | RCURLY of (Support.Error.Info)
  | LT of (Support.Error.Info)
  | LSQUAREBAR of (Support.Error.Info)
  | LSQUARE of (Support.Error.Info)
  | LPAREN of (Support.Error.Info)
  | LEFTARROW of (Support.Error.Info)
  | LCURLYBAR of (Support.Error.Info)
  | LCURLY of (Support.Error.Info)
  | HASH of (Support.Error.Info)
  | GT of (Support.Error.Info)
  | EXISTS of (Support.Error.Info)
  | EQEQ of (Support.Error.Info)
  | EQ of (Support.Error.Info)
  | EOF of (Support.Error.Info)
  | DOT of (Support.Error.Info)
  | DDARROW of (Support.Error.Info)
  | DARROW of (Support.Error.Info)
  | COMMA of (Support.Error.Info)
  | COLONHASH of (Support.Error.Info)
  | COLONEQ of (Support.Error.Info)
  | COLONCOLON of (Support.Error.Info)
  | COLON of (Support.Error.Info)
  | BARRSQUARE of (Support.Error.Info)
  | BARRCURLY of (Support.Error.Info)
  | BARGT of (Support.Error.Info)
  | BANG of (Support.Error.Info)
  | ARROW of (Support.Error.Info)
  | DQUOTE of (Support.Error.Info)
  | APOSTROPHE of (Support.Error.Info)
  | STRINGV of (string Support.Error.WithInfo)
  | FLOATV of (float Support.Error.WithInfo)
  | INTV of (int Support.Error.WithInfo)
  | LCID of (string Support.Error.WithInfo)
  | UCID of (string Support.Error.WithInfo)
  | IN of (Support.Error.Info)
  | LET of (Support.Error.Info)
  | ISZERO of (Support.Error.Info)
  | PRED of (Support.Error.Info)
  | SUCC of (Support.Error.Info)
  | TIMESFLOAT of (Support.Error.Info)
  | LAMBDA of (Support.Error.Info)
  | FALSE of (Support.Error.Info)
  | TRUE of (Support.Error.Info)
  | ELSE of (Support.Error.Info)
  | THEN of (Support.Error.Info)
  | IF of (Support.Error.Info)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VBAR
    | TOKEN_USCORE
    | TOKEN_TRIANGLE
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_SEMI
    | TOKEN_RSQUARE
    | TOKEN_RPAREN
    | TOKEN_RCURLY
    | TOKEN_LT
    | TOKEN_LSQUAREBAR
    | TOKEN_LSQUARE
    | TOKEN_LPAREN
    | TOKEN_LEFTARROW
    | TOKEN_LCURLYBAR
    | TOKEN_LCURLY
    | TOKEN_HASH
    | TOKEN_GT
    | TOKEN_EXISTS
    | TOKEN_EQEQ
    | TOKEN_EQ
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_DDARROW
    | TOKEN_DARROW
    | TOKEN_COMMA
    | TOKEN_COLONHASH
    | TOKEN_COLONEQ
    | TOKEN_COLONCOLON
    | TOKEN_COLON
    | TOKEN_BARRSQUARE
    | TOKEN_BARRCURLY
    | TOKEN_BARGT
    | TOKEN_BANG
    | TOKEN_ARROW
    | TOKEN_DQUOTE
    | TOKEN_APOSTROPHE
    | TOKEN_STRINGV
    | TOKEN_FLOATV
    | TOKEN_INTV
    | TOKEN_LCID
    | TOKEN_UCID
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_ISZERO
    | TOKEN_PRED
    | TOKEN_SUCC
    | TOKEN_TIMESFLOAT
    | TOKEN_LAMBDA
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__starttoplevel
    | NONTERM_toplevel
    | NONTERM_Command
    | NONTERM_Binder
    | NONTERM_Term
    | NONTERM_AppTerm
    | NONTERM_PathTerm
    | NONTERM_ATerm
    | NONTERM_Fields
    | NONTERM_NEFields
    | NONTERM_Field

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VBAR _ -> 0 
  | USCORE _ -> 1 
  | TRIANGLE _ -> 2 
  | STAR _ -> 3 
  | SLASH _ -> 4 
  | SEMI _ -> 5 
  | RSQUARE _ -> 6 
  | RPAREN _ -> 7 
  | RCURLY _ -> 8 
  | LT _ -> 9 
  | LSQUAREBAR _ -> 10 
  | LSQUARE _ -> 11 
  | LPAREN _ -> 12 
  | LEFTARROW _ -> 13 
  | LCURLYBAR _ -> 14 
  | LCURLY _ -> 15 
  | HASH _ -> 16 
  | GT _ -> 17 
  | EXISTS _ -> 18 
  | EQEQ _ -> 19 
  | EQ _ -> 20 
  | EOF _ -> 21 
  | DOT _ -> 22 
  | DDARROW _ -> 23 
  | DARROW _ -> 24 
  | COMMA _ -> 25 
  | COLONHASH _ -> 26 
  | COLONEQ _ -> 27 
  | COLONCOLON _ -> 28 
  | COLON _ -> 29 
  | BARRSQUARE _ -> 30 
  | BARRCURLY _ -> 31 
  | BARGT _ -> 32 
  | BANG _ -> 33 
  | ARROW _ -> 34 
  | DQUOTE _ -> 35 
  | APOSTROPHE _ -> 36 
  | STRINGV _ -> 37 
  | FLOATV _ -> 38 
  | INTV _ -> 39 
  | LCID _ -> 40 
  | UCID _ -> 41 
  | IN _ -> 42 
  | LET _ -> 43 
  | ISZERO _ -> 44 
  | PRED _ -> 45 
  | SUCC _ -> 46 
  | TIMESFLOAT _ -> 47 
  | LAMBDA _ -> 48 
  | FALSE _ -> 49 
  | TRUE _ -> 50 
  | ELSE _ -> 51 
  | THEN _ -> 52 
  | IF _ -> 53 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VBAR 
  | 1 -> TOKEN_USCORE 
  | 2 -> TOKEN_TRIANGLE 
  | 3 -> TOKEN_STAR 
  | 4 -> TOKEN_SLASH 
  | 5 -> TOKEN_SEMI 
  | 6 -> TOKEN_RSQUARE 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_RCURLY 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_LSQUAREBAR 
  | 11 -> TOKEN_LSQUARE 
  | 12 -> TOKEN_LPAREN 
  | 13 -> TOKEN_LEFTARROW 
  | 14 -> TOKEN_LCURLYBAR 
  | 15 -> TOKEN_LCURLY 
  | 16 -> TOKEN_HASH 
  | 17 -> TOKEN_GT 
  | 18 -> TOKEN_EXISTS 
  | 19 -> TOKEN_EQEQ 
  | 20 -> TOKEN_EQ 
  | 21 -> TOKEN_EOF 
  | 22 -> TOKEN_DOT 
  | 23 -> TOKEN_DDARROW 
  | 24 -> TOKEN_DARROW 
  | 25 -> TOKEN_COMMA 
  | 26 -> TOKEN_COLONHASH 
  | 27 -> TOKEN_COLONEQ 
  | 28 -> TOKEN_COLONCOLON 
  | 29 -> TOKEN_COLON 
  | 30 -> TOKEN_BARRSQUARE 
  | 31 -> TOKEN_BARRCURLY 
  | 32 -> TOKEN_BARGT 
  | 33 -> TOKEN_BANG 
  | 34 -> TOKEN_ARROW 
  | 35 -> TOKEN_DQUOTE 
  | 36 -> TOKEN_APOSTROPHE 
  | 37 -> TOKEN_STRINGV 
  | 38 -> TOKEN_FLOATV 
  | 39 -> TOKEN_INTV 
  | 40 -> TOKEN_LCID 
  | 41 -> TOKEN_UCID 
  | 42 -> TOKEN_IN 
  | 43 -> TOKEN_LET 
  | 44 -> TOKEN_ISZERO 
  | 45 -> TOKEN_PRED 
  | 46 -> TOKEN_SUCC 
  | 47 -> TOKEN_TIMESFLOAT 
  | 48 -> TOKEN_LAMBDA 
  | 49 -> TOKEN_FALSE 
  | 50 -> TOKEN_TRUE 
  | 51 -> TOKEN_ELSE 
  | 52 -> TOKEN_THEN 
  | 53 -> TOKEN_IF 
  | 56 -> TOKEN_end_of_input
  | 54 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__starttoplevel 
    | 1 -> NONTERM_toplevel 
    | 2 -> NONTERM_toplevel 
    | 3 -> NONTERM_Command 
    | 4 -> NONTERM_Command 
    | 5 -> NONTERM_Binder 
    | 6 -> NONTERM_Binder 
    | 7 -> NONTERM_Term 
    | 8 -> NONTERM_Term 
    | 9 -> NONTERM_Term 
    | 10 -> NONTERM_Term 
    | 11 -> NONTERM_Term 
    | 12 -> NONTERM_Term 
    | 13 -> NONTERM_AppTerm 
    | 14 -> NONTERM_AppTerm 
    | 15 -> NONTERM_AppTerm 
    | 16 -> NONTERM_AppTerm 
    | 17 -> NONTERM_AppTerm 
    | 18 -> NONTERM_AppTerm 
    | 19 -> NONTERM_PathTerm 
    | 20 -> NONTERM_PathTerm 
    | 21 -> NONTERM_PathTerm 
    | 22 -> NONTERM_ATerm 
    | 23 -> NONTERM_ATerm 
    | 24 -> NONTERM_ATerm 
    | 25 -> NONTERM_ATerm 
    | 26 -> NONTERM_ATerm 
    | 27 -> NONTERM_ATerm 
    | 28 -> NONTERM_ATerm 
    | 29 -> NONTERM_ATerm 
    | 30 -> NONTERM_Fields 
    | 31 -> NONTERM_Fields 
    | 32 -> NONTERM_NEFields 
    | 33 -> NONTERM_NEFields 
    | 34 -> NONTERM_Field 
    | 35 -> NONTERM_Field 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 56 
let _fsyacc_tagOfErrorTerminal = 54

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VBAR _ -> "VBAR" 
  | USCORE _ -> "USCORE" 
  | TRIANGLE _ -> "TRIANGLE" 
  | STAR _ -> "STAR" 
  | SLASH _ -> "SLASH" 
  | SEMI _ -> "SEMI" 
  | RSQUARE _ -> "RSQUARE" 
  | RPAREN _ -> "RPAREN" 
  | RCURLY _ -> "RCURLY" 
  | LT _ -> "LT" 
  | LSQUAREBAR _ -> "LSQUAREBAR" 
  | LSQUARE _ -> "LSQUARE" 
  | LPAREN _ -> "LPAREN" 
  | LEFTARROW _ -> "LEFTARROW" 
  | LCURLYBAR _ -> "LCURLYBAR" 
  | LCURLY _ -> "LCURLY" 
  | HASH _ -> "HASH" 
  | GT _ -> "GT" 
  | EXISTS _ -> "EXISTS" 
  | EQEQ _ -> "EQEQ" 
  | EQ _ -> "EQ" 
  | EOF _ -> "EOF" 
  | DOT _ -> "DOT" 
  | DDARROW _ -> "DDARROW" 
  | DARROW _ -> "DARROW" 
  | COMMA _ -> "COMMA" 
  | COLONHASH _ -> "COLONHASH" 
  | COLONEQ _ -> "COLONEQ" 
  | COLONCOLON _ -> "COLONCOLON" 
  | COLON _ -> "COLON" 
  | BARRSQUARE _ -> "BARRSQUARE" 
  | BARRCURLY _ -> "BARRCURLY" 
  | BARGT _ -> "BARGT" 
  | BANG _ -> "BANG" 
  | ARROW _ -> "ARROW" 
  | DQUOTE _ -> "DQUOTE" 
  | APOSTROPHE _ -> "APOSTROPHE" 
  | STRINGV _ -> "STRINGV" 
  | FLOATV _ -> "FLOATV" 
  | INTV _ -> "INTV" 
  | LCID _ -> "LCID" 
  | UCID _ -> "UCID" 
  | IN _ -> "IN" 
  | LET _ -> "LET" 
  | ISZERO _ -> "ISZERO" 
  | PRED _ -> "PRED" 
  | SUCC _ -> "SUCC" 
  | TIMESFLOAT _ -> "TIMESFLOAT" 
  | LAMBDA _ -> "LAMBDA" 
  | FALSE _ -> "FALSE" 
  | TRUE _ -> "TRUE" 
  | ELSE _ -> "ELSE" 
  | THEN _ -> "THEN" 
  | IF _ -> "IF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VBAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | USCORE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRIANGLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SLASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RSQUARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LSQUAREBAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LSQUARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFTARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCURLYBAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXISTS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DDARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLONHASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLONEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLONCOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BARRSQUARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BARRCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BARGT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BANG _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DQUOTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APOSTROPHE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOATV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ISZERO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PRED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUCC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMESFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LAMBDA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 0us; 1us; 4us; 5us; 2us; 65535us; 0us; 3us; 4us; 3us; 1us; 65535us; 7us; 8us; 16us; 65535us; 0us; 6us; 4us; 6us; 10us; 11us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 24us; 25us; 28us; 29us; 30us; 31us; 33us; 34us; 35us; 36us; 52us; 53us; 59us; 71us; 67us; 71us; 69us; 70us; 16us; 65535us; 0us; 12us; 4us; 12us; 10us; 12us; 13us; 12us; 15us; 12us; 17us; 12us; 21us; 12us; 24us; 12us; 28us; 12us; 30us; 12us; 33us; 12us; 35us; 12us; 52us; 12us; 59us; 12us; 67us; 12us; 69us; 12us; 22us; 65535us; 0us; 37us; 4us; 37us; 10us; 37us; 12us; 38us; 13us; 37us; 15us; 37us; 17us; 37us; 21us; 37us; 24us; 37us; 28us; 37us; 30us; 37us; 33us; 37us; 35us; 37us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 52us; 37us; 59us; 37us; 67us; 37us; 69us; 37us; 22us; 65535us; 0us; 51us; 4us; 51us; 10us; 51us; 12us; 51us; 13us; 51us; 15us; 51us; 17us; 51us; 21us; 51us; 24us; 51us; 28us; 51us; 30us; 51us; 33us; 51us; 35us; 51us; 39us; 51us; 40us; 51us; 42us; 51us; 44us; 51us; 46us; 51us; 52us; 51us; 59us; 51us; 67us; 51us; 69us; 51us; 1us; 65535us; 59us; 60us; 2us; 65535us; 59us; 65us; 67us; 68us; 2us; 65535us; 59us; 66us; 67us; 66us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 4us; 7us; 9us; 26us; 43us; 66us; 89us; 91us; 94us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 3us; 2us; 4us; 25us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 2us; 7us; 14us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 2us; 11us; 12us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 3us; 13us; 19us; 20us; 3us; 14us; 19us; 20us; 1us; 15us; 3us; 15us; 19us; 20us; 3us; 15us; 19us; 20us; 1us; 16us; 3us; 16us; 19us; 20us; 1us; 17us; 3us; 17us; 19us; 20us; 1us; 18us; 3us; 18us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 25us; 34us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 31us; 2us; 32us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 82us; 86us; 88us; 92us; 96us; 98us; 102us; 104us; 108us; 110us; 114us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 155us; 157us; 159us; 161us; 163us; |]
let _fsyacc_action_rows = 72
let _fsyacc_actionTableElements = [|16us; 32768us; 12us; 52us; 15us; 59us; 21us; 2us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 7us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 5us; 4us; 16us; 32768us; 12us; 52us; 15us; 59us; 21us; 2us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 7us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16386us; 0us; 16387us; 2us; 16409us; 4us; 9us; 20us; 10us; 0us; 16388us; 0us; 16389us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16390us; 8us; 16391us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 52us; 15us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 51us; 17us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16392us; 2us; 32768us; 1us; 23us; 40us; 20us; 1us; 32768us; 22us; 21us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16393us; 1us; 32768us; 22us; 24us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16394us; 2us; 32768us; 1us; 32us; 40us; 27us; 1us; 32768us; 20us; 28us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 42us; 30us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16395us; 1us; 32768us; 20us; 33us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 42us; 35us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16396us; 1us; 16397us; 22us; 48us; 1us; 16398us; 22us; 48us; 8us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 9us; 32768us; 12us; 52us; 15us; 59us; 22us; 48us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 1us; 16399us; 22us; 48us; 8us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 1us; 16400us; 22us; 48us; 8us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 1us; 16401us; 22us; 48us; 8us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 49us; 56us; 50us; 55us; 1us; 16402us; 22us; 48us; 2us; 32768us; 39us; 50us; 40us; 49us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 7us; 54us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 1us; 16409us; 20us; 69us; 15us; 16414us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 58us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 1us; 32768us; 8us; 61us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16415us; 1us; 16416us; 25us; 67us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 58us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16417us; 15us; 32768us; 12us; 52us; 15us; 59us; 37us; 63us; 38us; 62us; 39us; 64us; 40us; 57us; 43us; 26us; 44us; 46us; 45us; 44us; 46us; 42us; 47us; 39us; 48us; 19us; 49us; 56us; 50us; 55us; 53us; 13us; 0us; 16418us; 0us; 16419us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 19us; 21us; 38us; 39us; 40us; 43us; 44us; 45us; 61us; 62us; 71us; 87us; 89us; 105us; 107us; 123us; 124us; 127us; 129us; 145us; 146us; 148us; 164us; 165us; 168us; 170us; 186us; 188us; 204us; 205us; 207us; 223us; 225us; 241us; 242us; 244us; 246us; 255us; 265us; 267us; 276us; 278us; 287us; 289us; 298us; 300us; 303us; 304us; 305us; 306us; 322us; 324us; 325us; 326us; 327us; 328us; 330us; 346us; 348us; 349us; 350us; 351us; 352us; 353us; 355us; 371us; 372us; 388us; 389us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 1us; 2us; 1us; 2us; 1us; 6us; 4us; 4us; 6us; 6us; 1us; 2us; 3us; 2us; 2us; 2us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 0us; 1us; 1us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 16386us; 16387us; 65535us; 16388us; 16389us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16404us; 16405us; 65535us; 65535us; 16406us; 16407us; 16408us; 16409us; 65535us; 65535us; 65535us; 16410us; 16411us; 16412us; 16413us; 16415us; 65535us; 65535us; 16417us; 65535us; 16418us; 16419us; |]
let _fsyacc_reductions ()  =    [| 
# 434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Toplevel )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_starttoplevel));
# 443 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                             fun ctx -> [],ctx 
                   )
# 123 "Parser.fsy"
                 :  Toplevel ));
# 454 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Toplevel )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                             fun ctx ->
                               let cmd,ctx = _1 ctx in
                               let cmds,ctx = _3 ctx in
                               cmd::cmds,ctx 
                   )
# 125 "Parser.fsy"
                 :  Toplevel ));
# 470 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                             fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx 
                   )
# 133 "Parser.fsy"
                 : 'Command));
# 481 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Binder)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                             fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addName ctx _1.v) 
                   )
# 135 "Parser.fsy"
                 : 'Command));
# 493 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                             fun ctx -> NameBind 
                   )
# 140 "Parser.fsy"
                 : 'Binder));
# 504 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                             fun ctx -> TmAbbBind(_2 ctx) 
                   )
# 142 "Parser.fsy"
                 : 'Binder));
# 516 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                             _1 
                   )
# 146 "Parser.fsy"
                 : 'Term));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                             fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) 
                   )
# 148 "Parser.fsy"
                 : 'Term));
# 543 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                             fun ctx ->
                               let ctx1 = addName ctx _2.v in
                               TmAbs(_1, _2.v, _4 ctx1) 
                   )
# 150 "Parser.fsy"
                 : 'Term));
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                             fun ctx ->
                               let ctx1 = addName ctx "_" in
                               TmAbs(_1, "_", _4 ctx1) 
                   )
# 154 "Parser.fsy"
                 : 'Term));
# 575 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                             fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addName ctx _2.v)) 
                   )
# 158 "Parser.fsy"
                 : 'Term));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                             fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addName ctx "_")) 
                   )
# 160 "Parser.fsy"
                 : 'Term));
# 607 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                             _1 
                   )
# 164 "Parser.fsy"
                 : 'AppTerm));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppTerm)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                             fun ctx ->
                               let e1 = _1 ctx in
                               let e2 = _2 ctx in
                               TmApp(tmInfo e1,e1,e2) 
                   )
# 166 "Parser.fsy"
                 : 'AppTerm));
# 633 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                             fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) 
                   )
# 171 "Parser.fsy"
                 : 'AppTerm));
# 646 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                             fun ctx -> TmSucc(_1, _2 ctx) 
                   )
# 173 "Parser.fsy"
                 : 'AppTerm));
# 658 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                             fun ctx -> TmPred(_1, _2 ctx) 
                   )
# 175 "Parser.fsy"
                 : 'AppTerm));
# 670 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                             fun ctx -> TmIsZero(_1, _2 ctx) 
                   )
# 177 "Parser.fsy"
                 : 'AppTerm));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                             fun ctx ->
                               TmProj(_2, _1 ctx, _3.v) 
                   )
# 181 "Parser.fsy"
                 : 'PathTerm));
# 696 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PathTerm)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                             fun ctx ->
                               TmProj (_2, _1 ctx, string _3.v) 
                   )
# 184 "Parser.fsy"
                 : 'PathTerm));
# 710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                             _1 
                   )
# 187 "Parser.fsy"
                 : 'PathTerm));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                             _2 
                   )
# 192 "Parser.fsy"
                 : 'ATerm));
# 734 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                             fun ctx -> TmTrue (_1) 
                   )
# 194 "Parser.fsy"
                 : 'ATerm));
# 745 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                             fun ctx -> TmFalse (_1) 
                   )
# 196 "Parser.fsy"
                 : 'ATerm));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                             fun ctx ->
                               TmVar (_1.i, name2Index _1.i ctx _1.v, ctxLength ctx) 
                   )
# 198 "Parser.fsy"
                 : 'ATerm));
# 768 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fields)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                             fun ctx ->
                               TmRecord (_1, _2 ctx 1) 
                   )
# 201 "Parser.fsy"
                 : 'ATerm));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                             fun ctx -> TmFloat (_1.i, _1.v) 
                   )
# 204 "Parser.fsy"
                 : 'ATerm));
# 793 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                             fun ctx -> TmString (_1.i, _1.v) 
                   )
# 206 "Parser.fsy"
                 : 'ATerm));
# 804 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int Support.Error.WithInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                             fun ctx ->
                               let rec f n =
                                 match n with
                                 | 0 -> TmZero (_1.i)
                                 | n -> TmSucc (_1.i, f (n - 1))
                               f _1.v 
                   )
# 208 "Parser.fsy"
                 : 'ATerm));
# 820 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                             fun ctx i -> [] 
                   )
# 217 "Parser.fsy"
                 : 'Fields));
# 830 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NEFields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                             _1 
                   )
# 219 "Parser.fsy"
                 : 'Fields));
# 841 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Field)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                             fun ctx i -> [_1 ctx i] 
                   )
# 223 "Parser.fsy"
                 : 'NEFields));
# 852 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Field)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NEFields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                             fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) 
                   )
# 225 "Parser.fsy"
                 : 'NEFields));
# 865 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string Support.Error.WithInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Support.Error.Info)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                             fun ctx i -> (_1.v, _3 ctx) 
                   )
# 229 "Parser.fsy"
                 : 'Field));
# 878 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                             fun ctx i -> (string i, _1 ctx) 
                   )
# 231 "Parser.fsy"
                 : 'Field));
|]
# 890 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 57;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let toplevel lexer lexbuf :  Toplevel  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
