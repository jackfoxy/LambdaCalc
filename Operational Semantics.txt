(λ f. λ t. λ b. b)
(λ s. λ z. (λ s'. λ z'. s' z') s ((λ t. λ b.b) s z))


(λ y.
   (λ x. (λ f. λ x'. cond (iszro x') c1 (mult x' (f (prd x')))) (λ y'. x x y'))
   (λ x. (λ f. λ x'. cond (iszro x') c1 (mult x' (f (prd x')))) (λ y'. x x y'))
   y)

   
   AbbstractionBind (Abstraction (FI ("../../fixBottomMin.f",1,9),"t",Abstraction (...,...,...)))
   
   fi 
	Line 1
	file "../../fixBottomMin.f"
	character ? 29

(*
TAPL p. 72

Syntax

t ::=
    x       /* variable */
    λx.t    /* abstraction */
    t t     /* application */

v ::=
    λx.t    /* abstraction value */

Evaluation

       t1 → t1'    
    _______________      /* E-APP1 */
    t1 t2 → t1' t2

       t2 → t2'    
    _______________      /* E-APP2 */
    v1 t2 → v1 t2'

    (λx.t12) v2 → [x ↦ v2]t12    /* abstraction value */

*)
	
Operational Semantics

f: (λf. λx. _) ⊢ (λy. (λx. f (λy. x x y)) (λx. f (λy. x x y)) y) (λt. λb. b)
_____________________________________________________________________________
                                   λb. b

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

⊥ (bottom) ::=
	λ t.λ b. b
	
fix ::=
	λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))

Evaluation

   fix ⊢ (λy. (λx. f (λy'.x x y')) (λx. f (λy'.x x y')) y) ⊥
   -----------------------------------------------------------
                            ⊥ ⊥
